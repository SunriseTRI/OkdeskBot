import os
import sqlite3
import logging
import sqlite3
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# ENV
load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
# from aiogram.client.session.aiohttp import AiohttpSession
# session = AiohttpSession(proxy='http://proxy:port')
# bot = Bot(token=os.getenv("BOT_TOKEN"), session=session)

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()


def init_db():
    with sqlite3.connect("bot.db") as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                user_id INTEGER UNIQUE,
                phone TEXT,
                username TEXT,
                full_name TEXT
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS faq (
                id INTEGER PRIMARY KEY,
                question TEXT UNIQUE,
                answer TEXT
            )
        """)


def get_contact_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
        resize_keyboard=True
    )


@dp.message(Command("start"))
async def start(message: types.Message):
    try:
        with sqlite3.connect("bot.db") as conn:
            user = conn.execute(
                "SELECT 1 FROM users WHERE user_id = ?",
                (message.from_user.id,)
            ).fetchone()

        if not user:
            await message.answer(
                "–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
                reply_markup=get_contact_keyboard()
            )
        else:
            await message.answer(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:",
                reply_markup=ReplyKeyboardRemove()
            )
    except Exception as e:
        logger.error(f"Start error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.content == "contact")
async def handle_contact(message: types.Message):
    try:
        with sqlite3.connect("bot.db") as conn:
            conn.execute(
                """INSERT OR REPLACE INTO users 
                (user_id, phone, username, full_name) 
                VALUES (?, ?, ?, ?)""",
                (
                    message.from_user.id,
                    message.contact.phone_number,
                    message.from_user.username,
                    message.contact.first_name or ""
                )
            )
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardRemove()
        )
        logger.info(f"User {message.from_user.id} registered")
    except Exception as e:
        logger.error(f"Registration error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


@dp.message()
async def handle_question(message: types.Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        with sqlite3.connect("bot.db") as conn:
            user = conn.execute(
                "SELECT 1 FROM users WHERE user_id = ?",
                (message.from_user.id,)
            ).fetchone()

        if not user:
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
                reply_markup=get_contact_keyboard()
            )
            return

        # –ü–æ–∏—Å–∫ –≤ FAQ
        with sqlite3.connect("bot.db") as conn:
            answer = conn.execute(
                "SELECT answer FROM faq WHERE question LIKE ?",
                (f"%{message.text}%",)
            ).fetchone()

        response = answer[0] if answer else "üì® –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        await message.answer(response)

    except TelegramNetworkError as e:
        logger.error(f"Network error: {e}")
        await message.answer("‚åõ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    init_db()
    try:
        logger.info("Starting bot...")
        dp.run_polling(bot)
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
        logger.critical(f"Fatal error: {e}")
        logger.critical(f"Fatal error: {e}")